// Limpa a interface padr√£o
ui.root.clear();
ui.root.setLayout(ui.Panel.Layout.flow('vertical'));

// Painel principal
var panel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '300px'}
});

// T√≠tulo
panel.add(ui.Label('Selecione a Geometria e os Filtros para Obter Imagens Sentinel-2'));

// Campo GeoJSON (MultiPolygon)
var geojsonLabel = ui.Label('Insira a geometria no formato GeoJSON (tipo MultiPolygon)');
var geojsonTextbox = ui.Textbox({
  placeholder: 'Cole aqui o GeoJSON...',
  style: {width: '280px'}
});
panel.add(geojsonLabel);
panel.add(geojsonTextbox);

// Datas
var startYear = ui.Textbox({value: '2020', placeholder: 'Ano', style: {width: '60px'}});
var startMonth = ui.Textbox({value: '1', placeholder: 'M√™s', style: {width: '60px'}});
var startDay = ui.Textbox({value: '1', placeholder: 'Dia', style: {width: '60px'}});
var startDatePanel = ui.Panel({
  widgets: [
    ui.Label('Data de In√≠cio'),
    ui.Panel([startYear, startMonth, startDay], ui.Panel.Layout.flow('horizontal'))
  ],
  layout: ui.Panel.Layout.flow('vertical')
});
panel.add(startDatePanel);

var endYear = ui.Textbox({value: '2024', placeholder: 'Ano', style: {width: '60px'}});
var endMonth = ui.Textbox({value: '12', placeholder: 'M√™s', style: {width: '60px'}});
var endDay = ui.Textbox({value: '31', placeholder: 'Dia', style: {width: '60px'}});
var endDatePanel = ui.Panel({
  widgets: [
    ui.Label('Data de Fim'),
    ui.Panel([endYear, endMonth, endDay], ui.Panel.Layout.flow('horizontal'))
  ],
  layout: ui.Panel.Layout.flow('vertical')
});
panel.add(endDatePanel);

// Bot√£o Executar
var runButton = ui.Button('Executar', function() {
  var geojson = geojsonTextbox.getValue();
  if (!geojson) {
    print('‚ö†Ô∏è Por favor, insira a geometria GeoJSON.');
    return;
  }

  var AOI;
  try {
    AOI = ee.Geometry(JSON.parse(geojson));
  } catch (e) {
    print('‚ùå Erro ao interpretar o GeoJSON. Verifique se est√° bem formatado.');
    return;
  }

  var start = ee.Date.fromYMD(
    parseInt(startYear.getValue(), 10), 
    parseInt(startMonth.getValue(), 10), 
    parseInt(startDay.getValue(), 10)
  );
  var end = ee.Date.fromYMD(
    parseInt(endYear.getValue(), 10), 
    parseInt(endMonth.getValue(), 10), 
    parseInt(endDay.getValue(), 10)
  );

  getImageNames(AOI, start, end);
});
panel.add(runButton);

// Fun√ß√£o para obter os nomes das imagens e exportar direto
function getImageNames(AOI, startDate, endDate) {
  var collection = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')
    .filterBounds(AOI)
    .filterDate(startDate, endDate)
    .sort('system:time_start');

  var imageNames = collection.aggregate_array('system:id');

  imageNames.evaluate(function(names) {
    if (names.length > 0) {
      print('‚úÖ Imagens encontradas:', names);

      var table = ee.FeatureCollection(names.map(function(name) {
        return ee.Feature(null, {'image_name': name});
      }));

      // Exporta√ß√£o direta para aba "Tasks"
      Export.table.toDrive({
        collection: table,
        description: 'Imagens_Sentinel_Nomes',
        fileFormat: 'GeoJSON',
        folder: 'GEE_Export'
      });

      print('üìÅ Exporta√ß√£o enviada automaticamente para a aba "Tasks".');
    } else {
      print('‚ö†Ô∏è Nenhuma imagem encontrada para a √°rea selecionada.');
    }
  });
}

// Mostra a interface
ui.root.widgets().reset([panel]);
