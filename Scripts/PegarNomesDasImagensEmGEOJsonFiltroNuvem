// Limpa a interface
ui.root.clear();
ui.root.setLayout(ui.Panel.Layout.flow('vertical'));

// Painel principal
var panel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '300px'}
});

// Título
panel.add(ui.Label('Filtrar Imagens Sentinel-2 por Geometria e Nuvem'));

// Campo GeoJSON (MultiPolygon)
var geojsonTextbox = ui.Textbox({
  placeholder: 'Cole aqui o GeoJSON tipo MultiPolygon...',
  style: {width: '280px'}
});
panel.add(ui.Label('GeoJSON (MultiPolygon):'));
panel.add(geojsonTextbox);

// Campo Percentual de Nuvem Máxima
var cloudTextbox = ui.Textbox({
  value: '20',
  placeholder: 'Percentual máximo de nuvem (%)',
  style: {width: '100px'}
});
panel.add(ui.Label('Limite de nuvem na área (%):'));
panel.add(cloudTextbox);

// Campos de data
function criarCampoData(label, ano, mes, dia) {
  return ui.Panel({
    widgets: [
      ui.Label(label),
      ui.Panel([
        ui.Textbox({value: ano, placeholder: 'Ano', style: {width: '60px'}}),
        ui.Textbox({value: mes, placeholder: 'Mês', style: {width: '60px'}}),
        ui.Textbox({value: dia, placeholder: 'Dia', style: {width: '60px'}})
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    layout: ui.Panel.Layout.flow('vertical')
  });
}
var startDatePanel = criarCampoData('Data de Início', '2020', '1', '1');
var endDatePanel = criarCampoData('Data de Fim', '2024', '12', '31');

panel.add(startDatePanel);
panel.add(endDatePanel);

// Botão Executar
var runButton = ui.Button('Executar', function() {
  // Limpa prints anteriores
  print('🕒 Processando imagens...');

  // Tenta converter o GeoJSON
  var geojson;
  try {
    geojson = JSON.parse(geojsonTextbox.getValue());
  } catch (e) {
    print('❌ Erro no GeoJSON. Verifique se é um MultiPolygon válido.');
    return;
  }
  var AOI = ee.Geometry(geojson);

  // Datas
  var start = ee.Date.fromYMD(
    parseInt(startDatePanel.widgets().get(1).widgets().get(0).getValue(), 10),
    parseInt(startDatePanel.widgets().get(1).widgets().get(1).getValue(), 10),
    parseInt(startDatePanel.widgets().get(1).widgets().get(2).getValue(), 10)
  );
  var end = ee.Date.fromYMD(
    parseInt(endDatePanel.widgets().get(1).widgets().get(0).getValue(), 10),
    parseInt(endDatePanel.widgets().get(1).widgets().get(1).getValue(), 10),
    parseInt(endDatePanel.widgets().get(1).widgets().get(2).getValue(), 10)
  );

  var cloudLimit = parseFloat(cloudTextbox.getValue());

  // Chamada da função principal
  getFilteredImages(AOI, start, end, cloudLimit);
});
panel.add(runButton);

// Função para calcular nuvem real na geometria
function calcularNuvemNaROI(image, roi) {
  var scl = image.select('SCL');
  var maskCloud = scl.eq(3).or(scl.eq(8)).or(scl.eq(9)).or(scl.eq(10));

  var totalPixels = scl.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: roi,
    scale: 10,
    maxPixels: 1e13
  }).get('SCL');

  var cloudPixels = scl.updateMask(maskCloud).reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: roi,
    scale: 10,
    maxPixels: 1e13
  }).get('SCL');

  return ee.Number(cloudPixels).divide(ee.Number(totalPixels)).multiply(100);
}

// Função principal: filtrar e exportar imagens
function getFilteredImages(AOI, startDate, endDate, cloudLimit) {
  var collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
    .filterBounds(AOI)
    .filterDate(startDate, endDate)
    .map(function(img) {
      var pct = calcularNuvemNaROI(img, AOI);
      return img.set('nuvem_roi', pct);
    });

  var filtradas = collection.filter(ee.Filter.lte('nuvem_roi', cloudLimit));

  var nomes = filtradas.aggregate_array('system:id');
  
  nomes.evaluate(function(ids) {
    if (ids.length > 0) {
      print('✅ Imagens encontradas (nuvem <= ' + cloudLimit + '%):', ids);

      var tabela = ee.FeatureCollection(ids.map(function(id) {
        return ee.Feature(null, {'image_id': id});
      }));

      // Exportação automática para Drive
      Export.table.toDrive({
        collection: tabela,
        description: 'Sentinel2_Imagens_Filtradas',
        fileFormat: 'GeoJSON'
      });

      print('📁 Exportação enviada automaticamente para a aba Tasks!');
    } else {
      print('⚠️ Nenhuma imagem encontrada com nuvem <= ' + cloudLimit + '%.');
    }
  });
}

// Mostra a interface
ui.root.widgets().reset([panel]);
